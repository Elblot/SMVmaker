package com.sample.rules

import com.model.lts.Transition;
import com.utils.stringCleaner;
import com.main.Main;


rule "begin"
	when 
	$t : Transition(source.isInit() == true)
	then
	$t.addParameter("begin=TRUE");
end

rule "end"
	when 
	$t : Transition(target.isInit() == true)
	then
	$t.addParameter("end=TRUE");
end

rule "getUpdate"
	when
	$t1 : Transition(!isInput(), contain("get-update", "get_update") )
	$t2 : Transition(isInput(), contain("data"), getSource() == $t1.getTarget())
	then
	$t2.addParameter("getUpdate_" + stringCleaner.clean($t2.getUpdate()) + "=TRUE");
	Main.keyWords.get("getUpdate_d").addValue(stringCleaner.clean($t2.getUpdate()));
end

rule "encrypted" 
	when
	$t : Transition(isEncrypted())
	then
	$t.addParameter("encrypted=TRUE");
end 

rule "searchUpdate"
	when
	$t : Transition(isReq() == true, isInput() == false, !contain2("updatefile", "findUpdate", "get_update").isEmpty())
	then
	for (String param: $t.contain2("update", "findUpdate", "get_update")){
		$t.addParameter("searchUpdate_"+ stringCleaner.clean(param) + "=TRUE");
		Main.keyWords.get("searchUpdate_d").addValue(stringCleaner.clean(param));
	}
end

rule "login" 
	when
	$t1 : Transition(isReq() == true, contain("login", "user", "username"))
	$t2 : Transition(isReq() == false, isOk() == true, getSource() == $t1.getTarget())
	$t3 : Transition(isReq() == true, contain("password", "pass", "pwd"), getSource() == $t2.getTarget())
	then
	$t1.addParameter("loginAttempt_" + stringCleaner.clean($t2.getOtherCompo()) + "=TRUE");
	$t2.addParameter("loginAttempt_" + stringCleaner.clean($t2.getOtherCompo()) + "=TRUE");
	$t3.addParameter("loginAttempt_" + stringCleaner.clean($t2.getOtherCompo()) + "=TRUE");
	Main.keyWords.get("loginAttempt_c").addValue(stringCleaner.clean($t2.getOtherCompo()));
end

rule "login2"
	when
	$t : Transition(isReq() == true, contain("login", "user", "username"), contain("password", "pass", "pwd"))
	then
	$t.addParameter("loginAttempt_" + stringCleaner.clean($t.getOtherCompo()) + "=TRUE");
	Main.keyWords.get("loginAttempt_c").addValue(stringCleaner.clean($t.getOtherCompo()));
end

rule "login3"
	when
	$t1 : Transition(isReq() == true, contain("login", "user"))
	$t2 : Transition(isReq() == false, isOk() == false, getSource() == $t1.getTarget()) 
	then
	$t1.addParameter("loginAttempt_" + stringCleaner.clean($t2.getOtherCompo()) + "=TRUE");
	Main.keyWords.get("loginAttempt_c").addValue(stringCleaner.clean($t2.getOtherCompo()));
end

rule "logintls"
	when
	$t1 : Transition(isReq() == true, contain("Client Hello"))
	$t2 : Transition(isReq() == false, getSource() == $t1.getTarget(), contain("Server Hello")) 
	$t3 : Transition(isReq() == true, getSource() == $t2.getTarget(), contain("Encrypted Handshake Message")) 
	$t4 : Transition(isReq() == false, getSource() == $t3.getTarget(), contain("Encrypted Handshake Message")) 
	then
	$t1.addParameter("loginAttempt_" + stringCleaner.clean($t4.getOtherCompo()) + "=TRUE");
	$t2.addParameter("loginAttempt_" + stringCleaner.clean($t4.getOtherCompo()) + "=TRUE");
	$t3.addParameter("loginAttempt_" + stringCleaner.clean($t4.getOtherCompo()) + "=TRUE");
	Main.keyWords.get("loginAttempt_c").addValue(stringCleaner.clean($t4.getOtherCompo()));
	$t4.addParameter("authenticated_" + stringCleaner.clean($t4.getOtherCompo()) + "=TRUE");
	Main.keyWords.get("authenticated_c").addValue(stringCleaner.clean($t4.getOtherCompo()));
end

rule "authMega"
	when
	$t1 : Transition(isReq() == true, contain("Credentials:"), !contain("Referer:"))
	$t2 : Transition(isReq() == false, isOk() == true, getSource() == $t1.getTarget())
	then
	$t1.addParameter("loginAttempt_" + stringCleaner.clean($t2.getOtherCompo()) + "=TRUE");
	Main.keyWords.get("loginAttempt_c").addValue(stringCleaner.clean($t2.getOtherCompo()));
	$t2.addParameter("authenticated_" + stringCleaner.clean($t2.getOtherCompo()) + "=TRUE");
	Main.keyWords.get("authenticated_c").addValue(stringCleaner.clean($t2.getOtherCompo()));
end

rule "loginfailMega"
	when
	$t1 : Transition(isReq() == true, contain("Credentials:"), !contain("Referer:"))
	$t2 : Transition(isReq() == false, isOk() == false, getSource() == $t1.getTarget())
	then
	$t1.addParameter("loginAttempt_" + stringCleaner.clean($t2.getOtherCompo()) + "=TRUE");
	Main.keyWords.get("loginAttempt_c").addValue(stringCleaner.clean($t2.getOtherCompo()));
	$t2.addParameter("loginFail_" + stringCleaner.clean($t2.getOtherCompo()) + "=TRUE");
	Main.keyWords.get("loginFail_c").addValue(stringCleaner.clean($t2.getOtherCompo()));
end

rule "authenticated"  
	when
	$t1 : Transition(isReq() == true, contain("password", "pass", "pwd"))
	$t2 : Transition(isReq() == false, isOk() == true, getSource() == $t1.getTarget()) 
	then
	$t2.addParameter("authenticated_" + stringCleaner.clean($t2.getOtherCompo()) + "=TRUE");
	Main.keyWords.get("authenticated_c").addValue(stringCleaner.clean($t2.getOtherCompo()));
end 

rule "loginFail"
	when
	($t1 : Transition(isReq() == true, contain("login", "user"))
	or
	$t1 : Transition(isReq() == true, contain("password", "pass", "pwd")))
	$t2 : Transition(isReq() == false, isOk() == false, getSource() == $t1.getTarget()) 
	then
	$t2.addParameter("loginFail_" + stringCleaner.clean($t2.getOtherCompo()) + "=TRUE");
	Main.keyWords.get("loginFail_c").addValue(stringCleaner.clean($t2.getOtherCompo()));
end

rule "lockout"
	when
	$t1 : Transition(isReq() == true, contain("password", "pass", "pwd"))
	$t2 : Transition(isReq() == false, isOk() == false, getSource() == $t1.getTarget(), contain("locked", "account locked", "lockout")) 
	then
	$t2.addParameter("lockout_" + stringCleaner.clean($t2.getOtherCompo()) + "=TRUE");
	Main.keyWords.get("lockout_c").addValue(stringCleaner.clean($t2.getOtherCompo()));
end

rule "passwordRecovery" 
	when
	$t : Transition(isReq() == true, isInput() == true, contain("forgotten password", "password recovery", "forget"))
	then
	$t.addParameter("passwordRecovery=TRUE");
end

rule "blackListedWords" 
	when
	$t : Transition(!blackListed().isEmpty())
	then
	$t.addParameter("blackListedWords=TRUE");
end

rule "input"
	when
	$t : Transition(isInput())
	then
	$t.addParameter("input=TRUE");
end

rule "output"
	when
	$t : Transition(!isInput())
	then
	$t.addParameter("output=TRUE");
end

rule "validResponse" 
	when
	$t : Transition(isReq() == false, isOk() == true)
	then
	$t.addParameter("validResponse=TRUE");
end 

rule "errorResponse" 
	when
	$t : Transition(isReq() == false, isOk() == false)
	then
	$t.addParameter("errorResponse=TRUE");
end 

rule "XSS" 
	when
	$t : Transition(isReq(), !containXSS().isEmpty)
	then
	for (String param: $t.containXSS()){
		$t.addParameter("XSS_" + stringCleaner.clean(param) + "=TRUE");
		Main.keyWords.get("XSS_d").addValue(stringCleaner.clean(param));
	}
end

rule "sensitive"
	when
	$t : Transition(!sensitive().isEmpty())
	then
	for (String param: $t.sensitive()){
		$t.addParameter("sensitive_" + stringCleaner.clean(param) + "=TRUE");
		Main.keyWords.get("sensitive_d").addValue(stringCleaner.clean(param));
	}
end

rule "cmdSearchUpdate"
	when
	$t : Transition(isReq() == true, isInput(), contain("command", "cmd", "order"), contain("searchUpdate", "search_update"))
	then
	$t.addParameter("cmdSearchUpdate=TRUE");
end


rule "Request"
	when
	$t : Transition(isReq() == true)
	then 
	$t.addParameter("request=TRUE");
end

rule "Response"
	when
	$t : Transition(isReq() == false)
	then 
	$t.addParameter("response=TRUE");
end

	
rule "SQLinj"
	when
	$t : Transition(isReq() == true, containSQL() == true)
	then
	$t.addParameter("SQLinjection=TRUE");
end

rule "Unavailable"
	when
	$t : Transition(isReq() == false, contain("504", "time-out"))
	then
	$t.addParameter("unavailable=TRUE");
end

rule "Credential"
	when
	$t : Transition(!contain2("Credential", "login", "password").isEmpty())
	then
	for (String param: $t.contain2("Credential", "login", "password")){
		$t.addParameter("credential_" + stringCleaner.clean(param) + "=TRUE");
		Main.keyWords.get("credential_d").addValue(stringCleaner.clean(param));
	}
end

/* not needed, done during model transformation
rule "from"
	when
	
	then
	
end

rule "to"
	when
	
	then
	
end*/
